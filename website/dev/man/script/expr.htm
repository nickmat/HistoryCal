<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
<head>
 <title>HistoryCal - Expressions</title>
 <meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
 <link rel='icon' type='image/png' href='../../../sys/logo1_32x32x32.png' />
 <link rel='stylesheet' type='text/css' href='../../../sys/hcal.css' />
</head>
<body>

 <h1>
  <a  href='http://historycal.org'>
   <img id='logo' src='../../../sys/logo2.png' alt='Logo' />
  </a>
  HistoryCal - V0.0.7 Manual<br />Script Expressions
 </h1>

 <div id='page'>

  <div id='crumbs'>
   <a href='../../../index.htm' class='m-item'>Home</a>
   <a href='../../../dev/index.htm' class='m-item level1'>Development</a>
   <a href='../../../dev/man/index.htm' class='m-item level2'>V0.0.7 Manual</a>
   <a href='../../../dev/man/script/index.htm' class='m-item level3'>Script</a>
   <a href='expr.htm' class='m-item thispage level4'>Expressions</a>
   <a href='../../../dev/man/script/index.htm' class='m-item prev'>&lt;&lt;</a>
   <a href='../../../dev/man/script/write.htm' class='m-item next'>&gt;&gt;</a>
  </div>

<div id='content' class='nomenu'>

<h2>Value Types</h2>
<p>
 Expressions use the following value types.
</p>
<h3>Field</h3>
<p>
 A field is a integer value. The meaning will depend upon the context.
 It can represent an individual element for a date of any given calendar scheme.
 If the scheme is the Julian Day Number (jdn), then it represents a single day in the time continuum.
 It may also be used as a number without reference to any calendar.
</p>
<p>
 A field may hold one of the following special values.
</p>
<table class='list'>
<tr><th>Keyword</th><th>Meaning</th></tr>
<tr><td><b>past</b></td><td>The earliest possible day that can be represented.</td></tr>
<tr><td><b>future</b></td><td>The last possible day that can be represented.</td></tr>
<tr><td><b>today</b></td><td>
 The current day number (jdn) according to the underling operating system.<br />
 The value is substituted when the keyword is first encountered.
</td></tr>
<tr><td><b>?</b></td><td>An unknown or indeterminate value.</td></tr>
</table>

<h3>Range</h3>
<p>
 A range is expressed as two field values which denote the first and last values of an inclusive, continuous list.
 Both values may be the same, which implies a list of one value.
 A range is written using the '~' operator. (a ~ b) is identical to (b ~ a).
 When a range is output as a string, it is always written with the lower value first.
</p>
<p>
 The '?' value is not permitted in a range.
 The 'past' and 'future' values are permitted except that 
 (past ~ past) or (future ~ future) are not valid.
</p>
<p>
 A field may be promoted to a single value range. 
</p>
<p>
 A range may only be demoted to a field if it is a single value range. 
</p>

<h3>Rlist</h3>
<p>
 An rlist is a list of ranges. The list may contain zero or more ranges.
 If the rlist has more than one range, it is written using the '|' union operator.
 When an rlist is output, it is always written as a <a href='../calculate.htm#well-ordered'>well ordered list</a>.
</p>
<p>
 A range may be promoted to an rlist of one range. 
</p>
<p>
 An rlist may only be demoted to a range if, after conversion to a well ordered list, it contains a single range.
</p>

<h3>Record</h3>
<p>This part of the specification is still under development.</p>
<p>
 A record is a specialist type to represent the separate fields of a particular calendar scheme.
 The scheme must be defined before the record can be used.
 The format of the record type is '{"sig", field_1, field_2, field_3}'
 where 'sig' is the scheme code and the field values are in record-default order.
 If not all field values are given, the '?' value is assumed for those missing.
</p>

<h3>String</h3>
<p>
 A string is sequence of unicode (UTF-8) characters.
 It is written by enclosing the text in double quotes '"'.
 If a double quote is required in the text, use two double quotes together.
 For example, the value "Say ""Hello""" would print as Say "Hello".
</p>

<h3>Boolean</h3>
<p>
 A boolean value holds one of the two keywords 'true' or 'false'.
</p>

<h3>Error</h3>
<p>
 An error value is created whenever an operation is carried which has undefined results.
 When written out, the value should print text that describes where and why
 the error was created.
</p>

<h3>Date</h3>
<p>
 A date type is not a separate type
 but a convenient way to refer to one of the three ways of holding a date,
 a field, a range or an rlist.
 A date value can promote or demote a value between these types as required.
 An error should only occur if a demotion is required
 but the value is such that it can not take place.
</p>
<p>
 A date type strongly implies that the values are julian day numbers.
</p>

<h3>Number</h3>
<p>
 A number type is similar to a date type,
 but there is no implied promotion or demotion.
 Not all the field, range or rlist types may be valid in any given context. 
</p>

<h2>Names</h2>
<p>
 Any text in the script which is not an operator, literal or keyword is termed a 'name'.
 How a name is treated depends upon the context, as detailed below.
</p>
<p>
 Names are constructed from alphanumeric, '_' underline and ':' colon characters.
 They can not start with a numeric character.
</p>
<p>
 In some cases the script may accept either a name or a literal string. 
</p>

<h3>Variables</h3>
<p>
 Variables are created using the 'let' statement.
 They link a name to a value.
 Once created the 'let' statement name is optional
 as any known variable name (other than a statement name) is treated as a let statement.
</p>
<p>
 The life of a variable is controlled by the 'mark' and 'clear' statements.
 It should be noted that unless directed otherwise, the variable names and values
 are remembered after a script has finished running.
 So subsequent scripts can use values calculated by previous ones.
</p>

<h3>Entity Codes</h3>
<p>
 The vocab, grammar, scheme and format entities are identified by (normally short) codes.
 These codes are written as names or literal strings.
 The characters used in the codes can be any UTF-8 character except the ':' and '#' characters.
 (Note, other restrictions may be included in future versions.)
 If the code uses characters not permitted in a name,
 then it must be written as a literal string. 
</p>

<h3>Signatures</h3>
<p>
 A Signature is the scheme and/or the format codes to be used when converting between different value types.
</p>
<table class='list' id='operator-list'>
<tr><th>Signature</th><th>Example</th></tr>
<tr><td class='code'>scheme</td><td class='example'>write string,j today;</td></tr>
<tr><td class='code'>scheme:format</td><td class='example'>write string,"g:dmy+" today;</td></tr>
<tr><td class='code'>:format</td><td class='example'>write string,:iso today;</td></tr>
</table>

<h2>Operators</h2>
<h3>Arithmetic Operations</h3>
<table class='list' id='operator-list'>
<tr><th>Operator</th><th>Name</th><th>Use</th><th>Result</th></tr>
<tr><td class='code'>-</td><td>Unary minus</td><td class='example'><b>-</b> number_type</td><td class='example'>number_type</td></tr>
<tr><td class='code'>+</td><td>Plus</td><td class='example'>number_type <b>+</b> number_type</td><td class='example'>number_type</td></tr>
<tr><td class='code'>-</td><td>Minus</td><td class='example'>number_type <b>-</b> number_type</td><td class='example'>number_type</td></tr>
<tr><td class='code'>*</td><td>Multiply</td><td class='example'>field_type <b>*</b> field_type</td><td class='example'>field_type</td></tr>
<tr><td class='code'>/</td><td>Divide</td><td class='example'>field_type <b>/</b> field_type</td><td class='example'>field_type</td></tr>
<tr><td class='code'>mod</td><td>Modulo</td><td class='example'>field_type <b>mod</b> field_type</td><td class='example'>field_type</td></tr>
</table>
<p>
 For field values,
 the arithmetic operators '+' (addition), '-' (subtraction, negation)
 and '*' (multiplication) retain their normal mathematical meanings,
 division '/' and 'mod' provides integer division and modulus (remainder).
 Note that the modulo operator always returns a positive value
 and that if q = a / b and r = a mod b then a = b * q + r.
</p>

<h4>Unary Minus</h4>
<p>
 Unary minus has normal meaning of negation. The special field values are negated as follows,<br />
 -past = future<br />
 -future = past<br />
 -? = ?
</p>
<p>
 Negation of a range negates both limits, so -(a ~ b) = (-b ~ -a).
</p>
<p>
 Negation of an rlist negates all the ranges, but retains the well orderedness,<br />
 so -(a ~ b | c ~ d) = (-d ~ -c | -b ~ -a).
</p>

<h4>Addition and Subtraction</h4>
<p>
 Normal addition is applied when both sides of an expression are field values.
 If one side of an expression is a range then the field value is added to both limits of the range.
 If both sides of an expression are ranges, then both the lower limits and the upper limits are added together.
 If one side of an expression is a rlist, then the other side is added to each range in turn.
 Adding two rlists together is currently an error. 
</p>
<p>
 Subtraction is carried out adding the negated right hand side.
 So a - b = a + -b and (a ~ b) - (c ~ d) = (a ~ b) + (-d ~ -c).
</p>
<table class='list' id='operator-list'>
<tr><th>Expression</th><th>Example</th><th>Result</th></tr>
<tr><td class='code'>field_type + field_type</td><td class='example'>5 + 10<br />past + 123<br />past + future</td><td class='example'>15<br />past<br />Error</td></tr>
<tr>
 <td class='code'>range_type + field_type<br />field_type + range_type</td>
 <td class='example'>(8 ~ 16) + 20<br />250 + (500 ~ future)<br />past + (500 ~ future)</td>
 <td class='example'>28 ~ 36<br />750 ~ future<br />Error</td>
 </tr>
<tr><td class='code'>range_type + range_type</td><td class='example'>(8 ~ 16) + (10 ~ 20)</td><td class='example'>18 ~ 36</td></tr>
<tr>
 <td class='code'>rlist_type + field_type<br />field_type + rlist_type</td>
 <td class='example'>(8 ~ 16 | 20 ~ 50) + 20<br />250 + (past ~ 90 | 500 ~ future)</td>
 <td class='example'>28 ~ 36 | 40 ~ 70<br />past ~ 340 | 750 ~ future</td>
</tr>
<tr>
 <td class='code'>rlist_type + range_type<br />range_type + rlist_type</td>
 <td class='example'>(8 ~ 16 | 20 ~ 50) + (10 ~ 20)<br />(10 ~ 25) + (past ~ 9 | 50 ~ future)</td>
 <td class='example'>18 ~ 36 | 30 ~ 70<br />past ~ 34 | 60 ~ future</td>
</tr>
<tr><td class='code'>rlist_type + rlist_type</td><td class='example'>(8 ~ 16 | 20 ~ 50) + (15 ~ 18 | 25 ~ 27)</td><td class='example'>Error. Unable to add or subtract rlists.</td></tr>
</table>

<h4>Multiplication, Division and Modulo</h4>
<p>
 Currently, these operators can only be used with field types.
 The division and modulus operators are based on Euclidean integer division.
</p>
<p>
 Multiplication of any number with the ? value is an error.<br />
 Multiplication of any number with past (except ? and future) results in past.<br />
 Multiplication of any number with future (except ? and past) results in future.<br />
 Multiplication of past and future values is an error.
</p>
<p>
 For the division operator, the following conditions apply.<br />
 The divisor must be a non-zero integer value. Using the values 0, ?, past or future results in an error.<br />
 If the dividend is past and the divisor valid, the result is also past.<br />
 If the dividend is future and the divisor valid, the result is also future.<br />
 Division of the ? value results in an error.
</p>
<p>
 For the modulo operator, the following conditions apply.<br />
 Use of ?, past or future on either side the operation results in an error.<br />
 Using zero on the right hand side of the operation results in an error.
</p>
<table class='list' id='operator-list'>
<tr><th>Expression</th><th>Example</th><th>Result</th></tr>
<tr>
 <td class='code'>field_type * field_type</td>
 <td class='example'>5 * 10<br />past * 123<br />past * future</td>
 <td class='example'>50<br />past<br />Error</td>
</tr>
<tr>
 <td class='code'>field_type / field_type</td>
 <td class='example'>10 / 5<br />past / 123<br />123 / future</td>
 <td class='example'>2<br />past<br />Error</td>
</tr>
<tr>
 <td class='code'>field_type <b>mod</b> field_type</td>
 <td class='example'>21 <b>mod</b> 5<br />-100 <b>mod</b> -6<br />past <b>mod</b> 2</td>
 <td class='example'>1<br />2<br />Error</td>
</tr>
</table>

<h3>Range Operator</h3>
<p>
 The binary range operator creates a range value which is just large enough to include
 both its operands.<br />
 The order of the operands is not significant.<br />
 The operands can be either field or range types.<br />
 The values past and future may be used.<br />
 Use of the ? value is an error.
</p>
<table class='list' id='operator-list'>
<tr><th>Example</th><th>Result</th></tr>
 <tr><td class='example'>5 ~ 10</td><td class='example'>5 ~ 10</tr>
 <tr><td class='example'>123 ~ past</td><td class='example'>past ~ 123</tr>
 <tr><td class='example'>? ~ 40</td><td class='example'>Error</td></tr>
 <tr><td class='example'>(5 ~ 10) ~ 6</td><td class='example'>5 ~ 10</tr>
 <tr><td class='example'>(5 ~ 10) ~ (15 ~ 8)</td><td class='example'>5 ~ 15</tr>
 <tr><td class='example'>48 ~ 25 ~ 5 ~ 10</td><td class='example'>5 ~ 48</tr>
</table>

<h3>Set Operators</h3>
<p>
 The Complement '!' is a unary prefix operator which operates on a rlist.
 The Union '|', Intersection '&', Symmetric difference '^' and Relative complement '\'
 operators are binary.
 These operate on an rlist on left hand side and a range on right hand side.
 If necessary, range and field types are be promoted to an rlist or range.
</p>
<p>
 Details of the set operators are found <a href='../calculate.htm'>here</a>.
</p>

<h3>Comparison Operators</h3>
<p>
 The comparison operators must have operands of the same type,
 after type allowing for type promotion.
 The output is always a boolean type.
</p>
<p>
 Any types, other than error types, can be compared for equality or non-equality.
</p>
<p>
 Comparison operators that compare magnitude can only be used with field or string types.
 Use with any other type results in an error.
</p>

<h3>Boolean Operators</h3>
<p>
 The unary prefix operator 'not' and the binary operators 'and' and 'or'
 can be used with boolean types only. Any other type will produce an error.
</p>

<h3>Subscript operators</h3>
<p>
 The subscript operators allow access to to the various parts of the more complex value types.
</p>
<h4>Index operator</h4>
<p>
 Used in the form <b>Value[ Index ]</b>,
 the square brackets are used to enclose an index into left hand value.
</p>
<p>
 If the value is a rlist type and the index a number (field),
 then the result is the range pointed to by the (zero based) index.
</p>
<p>
 If the value is a record type and the index a number (field),
 then the result is the field pointed to by the (zero based) index.<br />
 If the index is a name or string value then this is treated as a field name,
 and the result is the corresponding value of the field.
</p>
<p>
 If the value is a field, then it is assumed to be a date jdn.
 The index must be a name or string signature corresponding to a scheme and field name.
 The result is the field value.
</p>
<p>
 Note, the field names used may be the default record or the alias field name.
</p>
<table class='list' id='operator-list'> <!-- See test file subscript006.hcs -->
<tr><th>Example</th><th>Result</th></tr>
 <tr><td class='example'>(8~16|20~50|75~99)[1]</td><td class='example'>20 ~ 50</tr>
 <tr><td class='example'>{g,1948,9,19}[0]</td><td class='example'>1948</td></tr>
 <tr><td class='example'>{g,1948,9,19,?}[wday]</td><td class='example'>?</td></tr>
 <tr><td class='example'>2432814[g:wday]</td><td class='example'>7</tr>
 <tr><td class='example'>let i="g:Month"; 2432814[(i)]</td><td class='example'>9</tr>
</table>

<h4>Property operator</h4>
<p>
 A value followed by a dot '.' and a name will return a property of the value,
 as listed below.
</p>
<table class='list' id='operator-list'>
<tr><th>Property</th><th>Use</th><th>Result</th><th>Comment</th></tr>
<tr><td class='code'>low</td><td class='example'>(7~16).low</td><td class='example'>7</td><td>Return the lower bound of a range or rlist.</td></tr>
<tr><td class='code'>high</td><td class='example'>(7~16).high</td><td class='example'>16</td><td>Return the upper bound of a range or rlist.</td></tr>
<tr><td class='code'>span</td><td class='example'>(7~16).span</td><td class='example'>10</td><td rowspan='2'>Return the inclusive count between upper and lower bounds of a range or rlist.</td></tr>
<tr><td class='code'>span</td><td class='example'>(21|79~88|100~120|200~210).span</td><td class='example'>190</td></tr>
<tr><td class='code'>size</td><td class='example'>(21|79~88|100~120|200~210).size</td><td class='example'>4</td><td rowspan='2'>Return the number of elements in a rlist or record.</td></tr>
<tr><td class='code'>size</td><td class='example'>{g,1948,9,19}.size</td><td class='example'>3</td></tr>
<tr><td class='code'>envelope</td><td class='example'>(21|79~88|100~120|200~210).envelope</td><td class='example'>21 ~ 210</td><td>Return the enclosing range af an rlist.</td></tr>
<tr><td class='code'>scheme</td><td class='example'>{g,1948,9,19}.scheme</td><td class='example'>"g"</td><td>Return the scheme code string of a record.</td></tr>
</table>

<h3>Type Conversions</h3>
<p>
 The cast operators are used to covert values between different types.
 If additional information is required (such as scheme and/or format)
 then a comma and signature can be added to the cast.
 If it is omitted, the system wide default values are assumed.  
</p>

<h4>Date Cast</h4>
<p>
 A date, in this context, means a rlist or an well ordered list of ranges.
 As well as an rlist, a date may be encapsulated as a text string or a record type.
 The date cast puts these two record types into a consistent rlist type.
 The rlist will then be demoted to a range or field if appropriate.
</p>
<p>
 If the original type is a string,
 then the cast operation will need to know the scheme and format to be used,
 and so a signature can be added or else the system output default settings are used.
 Note the a string description of an rlist may include embedded range and union symbols,
 but this is different from a HistoryCal Date Expression.
 One significant difference is that only one scheme format can be used for the conversion.
</p>
<table class='list' id='operator-list'>
<tr><th>Example</th><th>Result</th></tr>
 <tr><td class='example'>date "19sep1948"</td><td class='example'>2432814</tr>
 <tr><td class='example'>date "1940~1950|1945~1955"</td><td class='example'>2429630 ~ 2435473</td></tr>
 <tr><td class='example'>date,g:iso "[1940..1950,1945..1955]"</td><td class='example'>2429630 ~ 2435473</td></tr>
 <tr><td class='example'>date {g, 1948, 9, 19}</td><td class='example'>2432814</tr>
 <tr><td class='example'>date {g, 1948}</td><td class='example'>2432552 ~ 2432917</tr>
 <tr><td colspan='2'>The above examples assume a system input setting of "g:dmy".</td></tr>
</table>

<h4>String Cast</h4>
<p>
 The string cast operator converts a field, range, rlist or record type into a string type.
</p>
<p>
 Except for a record type, the scheme code signature must be provided.
 If the format code is not included in the signature,
 then the default for that scheme is used.
</p>
<table class='list' id='operator-list'>
<tr><th>Example</th><th>Result</th></tr>
 <tr><td class='example'>string,"g:dmy+" 2432814</td><td class='example'>"19 September 1948"</tr>
 <tr><td class='example'>string,g 2429630~2435473</td><td class='example'>"1940 ~ 1955"</td></tr>
 <tr><td class='example'>string,g:iso 2429630 ~ 2429995 | 2433283 ~ 2435473</td><td class='example'>"[1940,1950..1955]"</td></tr>
 <tr><td class='example'>string {g, 1948, 9, 19}</td><td class='example'>"19 Sep 1948"</tr>
 <tr><td class='example'>string {j, 1948}</td><td class='example'>"1948"</tr>
 <tr><td colspan='2'>The above examples assume a system output setting of "g:dmy".</td></tr>
</table>

<h4>Record Cast</h4>
<p>
 The record cast operator converts a field (as a julian day number) or string type into a record type.
 At this time, using the record cast with a range or rlist type is an error.
</p>
<p>
 If a scheme:format signature is not given,
 then to cast a field the output default setting is used,
 whereas if casting a string, the input default is used.
</p>
<p>
 Note that a record created from a cast always has all the fields included, even the optional ones.
 Only main fields are given values though.
 Records created using the record operator '{}' only include the given fields,
 even if this does not fully qualify a date.
</p>
<table class='list' id='operator-list'>
<tr><th>Example</th><th>Result</th></tr>
 <tr><td class='example'>record,g:dmy "19sep1948"</td><td class='example'>{"g", 1948, 9, 19, ?}</tr>
 <tr><td class='example'>record "21??"</td><td class='example'>{"g", ?, ?, 21, ?}</td></tr>
 <tr><td class='example'>record,:u "1948Year 9Month 19Day"</td><td class='example'>{"g", 1948, 9, 19, ?}</td></tr>
 <tr><td class='example'>record,j 2432814</td><td class='example'>{"j", 1948, 9, 6, ?}</tr>
 <tr><td class='example'>record 2429630~2435473</td><td class='example'>Error</td></tr>
 <tr><td colspan='2'>The above examples assume a system input and output setting of "g:dmy".</td></tr>
</table>

<h2>Operator Precedence</h2>
<p>
 Expressions are evaluated according to the operators detailed in the table.
 Operators with higher precedence are listed first.
 When precedence is equal, operations are carried out from left to right.
</p>
<table class='list' id='operator-list'>
<tr><th colspan='4'>Operator List</th></tr>
<tr><th>Operator</th><th>Name</th><th>Use</th><th>Result</th></tr>
<tr><td class='code'>()</td><td>Parenthesized expression</td><td class='example'><b>(</b> expr <b>)</b></td><td class='example'>value</td></tr>
<tr><td class='code' colspan='4'></td></tr>
<tr><td class='code'>{}</td><td>Record</td><td class='example'><b>{</b>sig,field_value,...<b>}</b></td><td class='example'>record_value</td></tr>
<tr><td class='code'>!</td><td>Complement</td><td class='example'><b>!</b>rlist_value</td><td class='example'>rlist_value</td></tr>
<tr><td class='code'>not</td><td>Logical not</td><td class='example'><b>not </b>bool_value</td><td class='example'>bool_value</td></tr>
<tr><td class='code'>-</td><td>Unary minus</td><td class='example'><b>-</b>number_value</td><td class='example'>number_value</td></tr>
<tr><td class='code'>date</td><td>Date cast</td><td class='example'><b>date,sig</b> string_value<br /><b>date</b> record_value</td><td class='example'>date_value</td></tr>
<tr><td class='code'>record</td><td>Record cast</td><td class='example'><b>record,sig</b> string_value<br /><b>record</b> field_value</td><td class='example'>record_value</td></tr>
<tr><td class='code'>string</td><td>String cast</td><td class='example'><b>string,sig</b> date_value<br /><b>string,sig</b> record_value</td><td class='example'>string_value</td></tr>
<tr><td class='code' colspan='4'></td></tr>
<tr><td class='code'>[]</td><td>Subscript</td><td class='example'>date_value<b>[</b>string_value<b>]</b></td><td class='example'>field_value</td></tr>
<tr><td class='code'>.</td><td>Property</td><td class='example'>value<b>.</b>name</td><td class='example'>value</td></tr>
<tr><td class='code' colspan='4'></td></tr>
<tr><td class='code'>*</td><td>Multiply</td><td class='example'>field_value <b>*</b> field_value</td><td class='example'>field_value</td></tr>
<tr><td class='code'>/</td><td>Divide</td><td class='example'>field_value <b>/</b> field_value</td><td class='example'>field_value</td></tr>
<tr><td class='code'>mod</td><td>Modulo</td><td class='example'>field_value <b>mod</b> field_value</td><td class='example'>field_value</td></tr>
<tr><td class='code' colspan='4'></td></tr>
<tr><td class='code'>+</td><td>Plus</td>
 <td class='example'>number_value <b>+</b> number_value<br />string_value <b>+</b> value<br />value <b>+</b> string_value</td>
 <td class='example'>number_value<br />string_value<br />string_value</td>
</tr>
<tr><td class='code'>-</td><td>Minus</td><td class='example'>number_value <b>-</b> number_value</td><td class='example'>number_value</td></tr>
<tr><td class='code' colspan='4'></td></tr>
<tr><td class='code'>~</td><td>Range</td>
 <td class='example'>field_value <b>~</b> field_value<br />range_value <b>~</b> range_value</td>
 <td class='example'>range_value<br />range_value</td>
</tr>
<tr><td class='code' colspan='4'></td></tr>
<tr><td class='code'>|</td><td>Union</td><td class='example'>rlist_value <b>|</b> range_value</td><td class='example'>rlist_value</td></tr>
<tr><td class='code'>&amp;</td><td>Intersection</td><td class='example'>rlist_value <b>&amp;</b> range_value</td><td class='example'>rlist_value</td></tr>
<tr><td class='code'>^</td><td>Symmetric difference</td><td class='example'>rlist_value <b>^</b> range_value</td><td class='example'>rlist_value</td></tr>
<tr><td class='code'>\</td><td>Relative complement</td><td class='example'>rlist_value <b>\</b> range_value</td><td class='example'>rlist_value</td></tr>
<tr><td class='code' colspan='4'></td></tr>
<tr><td class='code'>&lt;</td><td>Less than</td><td class='example'>value <b>&lt;</b> value</td><td class='example'>bool_value</td></tr>
<tr><td class='code'>&lt;=</td><td>Less than or equal</td><td class='example'>value <b>&lt;=</b> value</td><td class='example'>bool_value</td></tr>
<tr><td class='code'>&gt;</td><td>Greater than</td><td class='example'>value <b>&gt;</b> value</td><td class='example'>bool_value</td></tr>
<tr><td class='code'>&gt;=</td><td>Greater than or equal</td><td class='example'>value <b>&gt;=</b> value</td><td class='example'>bool_value</td></tr>
<tr><td class='code'>=</td><td>Equal</td><td class='example'>value <b>=</b> value</td><td class='example'>bool_value</td></tr>
<tr><td class='code'>&lt;&gt;</td><td>Not equal</td><td class='example'>value <b>&lt;&gt;</b> value</td><td class='example'>bool_value</td></tr>
<tr><td class='code' colspan='4'></td></tr>
<tr><td class='code'>and</td><td>Logical and</td><td class='example'>bool_value <b>and</b> bool_value</td><td class='example'>bool_value</td></tr>
<tr><td class='code'>or</td><td>Logical inclusive or</td><td class='example'>bool_value <b>or</b> bool_value</td><td class='example'>bool_value</td></tr>
</table>

<h2>Keywords</h2>
<p>
 The following is a complete list of keywords.
 These words cannot be used as variable names or signature codes.
</p>
<p>
 <b>and, date, false, future, invalid, match, mod, not, or, past, record, string, today, true</b>
</p>

</div><!--id=content-->

 <hr />

 <div id='valid'>
  <p>
   <a href='http://validator.w3.org/check?uri=referer'>
    <img src='../../../sys/valid-xhtml10.png' alt='Valid XHTML 1.0 Strict' height='31' width='88' />
   </a>
  </p>
 </div>

 <div id='create-date'><p>21<sup>st</sup> October 2015</p></div>

<!-- Start of StatCounter Code for Default Guide -->
<script type="text/javascript">
//<![CDATA[
var sc_project=9849843;
var sc_invisible=1;
var sc_security="4988237c";
var scJsHost = (("https:" == document.location.protocol) ?
"https://secure." : "http://www.");
document.write("<sc"+"ript type='text/javascript' src='" +
scJsHost+
"statcounter.com/counter/counter_xhtml.js'></"+"script>");
//]]>
</script>
<noscript><div class="statcounter"><a title="website
statistics" href="http://statcounter.com/free-web-stats/"
class="statcounter"><img class="statcounter"
src="http://c.statcounter.com/9849843/0/4988237c/1/"
alt="website statistics" /></a></div></noscript>
<!-- End of StatCounter Code for Default Guide -->

 </div>

</body>
</html>
