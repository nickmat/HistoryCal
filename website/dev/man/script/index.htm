<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
<head>
 <title>HistoryCal - Script</title>
 <meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
 <link rel='icon' type='image/png' href='../../../sys/logo32x32.png' />
 <link rel='stylesheet' type='text/css' href='../../../sys/livery.css' />
 <link rel='stylesheet' type='text/css' href='../../../sys/hcal.css' />
</head>
<body>

 <div class='heading'>
  <div class='logo'>
   <a  href='http://historycal.org'>
    <img class='logo' src='../../../sys/logo266x100.png' alt='Logo' />
   </a>
  </div>
  HistoryCal - V0.0.7 Manual<br />Script Language
  <div class='clear'></div>
 </div>

 <div class="crumbs">
  <a href='../../../index.htm' class='m-item'>Home</a>
  <a href='../../../dev/index.htm' class='m-item'>Development</a>
  <a href='../../../dev/man/index.htm' class='m-item'>V0.0.7 Manual</a>
  <a href='index.htm' class='m-item thispage'>Script</a>
  <a href='../../../dev/man/script/expr.htm' class='m-item nav'>►</a>
  <a href='../../../dev/man/cal/roman.htm' class='m-item nav'>◄</a>
 </div>

 <div class='menu'>
  <a href='../../../dev/man/script/expr.htm' class='m-item'>Expressions</a>
  <a href='../../../dev/man/script/write.htm' class='m-item'>write Statement</a>
  <a href='../../../dev/man/script/let.htm' class='m-item'>let Statement</a>
  <a href='../../../dev/man/script/end.htm' class='m-item'>end Statement</a>
  <a href='../../../dev/man/script/if.htm' class='m-item'>if Statement</a>
  <a href='../../../dev/man/script/do.htm' class='m-item'>do ... loop</a>
  <a href='../../../dev/man/script/function.htm' class='m-item'>function &amp; call</a>
  <a href='../../../dev/man/script/mark.htm' class='m-item'>mark &amp; clear</a>
  <a href='../../../dev/man/script/vocab.htm' class='m-item'>Define vocab</a>
  <a href='../../../dev/man/script/grammar.htm' class='m-item'>Define grammar</a>
  <a href='../../../dev/man/script/format.htm' class='m-item'>Define format</a>
  <a href='../../../dev/man/script/scheme.htm' class='m-item'>Define scheme</a>
  <a href='../../../dev/man/script/set.htm' class='m-item'>set Statement</a>
  <a href='../../../map.htm' class='m-item'>Site Map</a>
  <div class='menu-plus'>
   The project page at<br />
   <a href='https://sourceforge.net/projects/historycal'>
    <img src='../../../sys/sf-logo-13.jpg'
     width='120' height='30'
     alt='SourceForge.net'
    />
   </a><br />
   Code repository at<br />
   <a href='https://github.com/nickmat/HistoryCal'>
    <img src='../../../sys/github_logo.png' height='30' alt='GitHub' />
   </a><br />
   <a href='https://sourceforge.net/projects/historycal/files'>
    <img src='../../../sys/download-button.png' alt='Download' />
   </a>
  </div>
 </div>

<div id='content'>

<h2>Section Under Construction</h2>
<h2>Introduction</h2>
<p>
 The HistoryCal program has a built-in script language called HistoryCal Script.
 This is different from the input that has been described at the beginning of this manual,
 which is called a HistoryCal Date Expression.
 The Date Expression is similar to the script but is simplified and designed for easier input.
 The Date Expression is converted into a HistoryCal Script to be evaluated.
</p>

<p>
 The script is designed to serve two main purposes.
</p>
<ul>
 <li>Define the calendar schemes and their associated grammar.</li>
 <li>Calculate and output complex calendar expressions.</li>
</ul>
<p>
 The scripts for the default calendar definitions are shown in the
 <a href='../defs/index.htm'>calendar definitions</a> section.
</p>

<h3>Hello World</h3>
<p>
 A script consists of one or more statements.
 As is usual in these circumstances, we present a hello world script.
</p>
<table class='code'>
<tr><th>Hello Script</th></tr>
<tr><td
>// Hello world script.

writeln "Hello world!";
</td></tr>
</table>
<img class='scrnprnt' src='../sp/hello.png' alt='Hello World message screen print' />
<p>
 Using a text editor, copy the script and save as "hello.hcs".
 Run the HistoryCal Script by starting the HistoryCal program.
 Under the menu option "File &gt; Run Script ..." find the file and select it.
 This should then result in the message shown.
</p>
<p>
 Scripts should always use the UTF-8 character set.
</p>

<h3 class='clear'>Comments and White Space</h3>
<table class='code'>
<tr><td
>// A single line comment
/*
  This is a
  multi-line
  comment.
*/
</td></tr>
</table>
<p>
 The first line is a single line comment.
 Every thing from the "//" token to the end of the line taken to be a comment.
</p>
<p>
 Multi-line comments are included by placing them between the
 "/*" and "*/" tokens. Multi-line comments cannot be nested.
</p>
<p>
 Tabs, spaces, newlines and comments can appear anywhere within a script
 without its meaning being affecting.
 They are required only when necessary to separate tokens.
</p>

<h3>Tokens</h3>
<p>
 The tokens that make up the script can be categorised into three groups,
 operators, literals and names.
</p>
<p>
 Operators are used to construct expressions.
 Mostly they are non-alphanumeric characters but they also include some text words.
 A complete list is given in the <a href='expr.htm#operator-list'>Operator List</a> table.
 Where words are used, they are reserved and cannot be used as names.
</p>
<p>
 Literals can be numbers or text strings.
 Numbers (usually called fields) consist of just the numeric characters '0-9'.
 At this time, only integer numbers can be used.
 Text strings are placed between '"' double quote characters.
 If you need to include a double quote in the text, use two together,
 as in "Say ""Hello""".
</p>
<p>
 Names are constructed from alphanumeric, '_' underline, ':' colon and '.' dot characters.
 They can not start with a numeric or dot character.
 The meaning of a name is dependant on the context
 and the same name can be used for different purposes in a script,
 although this is not recommended.
 Names are used as statements, sub-statements, statements arguments and variables. 
</p>

<h3>Entities and Codes</h3>
<p>
 The Cal code library is used by defining scheme entities.
 This is done by using the <b>scheme</b> statement in the script language.
 The scheme entity makes use of <b>vocab</b> (vocabulary), <b>format</b> and <b>grammar</b> entities.
 These are all identified by a code name.
 Because the script always knows, by context, which type of entity is being referred to,
 the different types can reuse the same code name.
</p>
<p>
 A code name can use any character except white space and the
 characters ':' colon and '#' hash.
 (More characters may be added to the excluded list in the future.)
 If the code conforms to the script name token definition it can be written directly,
 otherwise it must be written as a literal (i.e. in double quotes).
</p>
<p> 
 When the HistoryCal program starts, it reads the default script
 which make the default schemes available to the program.
 The default script for the various schemes are shown with their technical descriptions
 <a href='../defs/index.htm'>here</a>.
</p>
<p>
</p>

<h3>Expressions and Variables</h3>
<p>
 Values in the HistoryCal Script can exist as one of a number of types:-
</p>
<ul>
 <li><b>String</b> - A sequence of unicode (UTF-8) characters.</li>
 <li><b>Field</b> - An integer number, a date or part of a date.</li>
 <li><b>Range</b> - One or more consecutive dates.</li>
 <li><b>RList</b> - A <a href='../calculate.htm#well-ordered'>well-ordered list</a> of dates.</li>
 <li><b>Record</b> - A scheme code and sequence of Fields which describe a date.</li>
 <li><b>Boolean</b> - The value <b>true</b> or <b>false</b>.</li>
</ul>
<p>
 Variables are defined by using the <code>let</code> statement,
 but their type is determined by their context.
 There are a number of operators which are used in expressions and
 the types of these expressions are automatically converted, wherever possible.
</p>

<h3>Statements</h3>
<p>
 A script consists of one or more of the following Statements:-
</p>
<table class='list'>
<tr><th colspan='3'>Statement List</th></tr>
<tr><th>Statement</th><th>Use</th><th>Example</th></tr>
<tr><td class='code'><a href='function.htm'>call</a></td><td>Run a predefined function.</td><td class='example'>call today.fr;</td></tr>
<tr><td class='code'><a href='mark.htm'>clear</a></td><td>Delete all variables.</td><td class='example'>clear;</td></tr>
<tr><td class='code'><a href='do.htm'>do</a></td><td>Run script until a condition is met.</td><td class='example'>do while y &lt;= 2015
  writeln "1 Jan " + y;
  y += 1;
loop</td></tr>
<tr><td class='code'><a href='end.htm'>end</a></td><td>Stop running the script.</td><td class='example'>end;</td></tr>
<tr><td class='code'><a href='format.htm'>format</a></td><td>Define a Format for a grammar</td><td class='example'>format j:ydm, "(Year)| (Day)| (Month:m)";</td></tr>
<tr><td class='code'><a href='function.htm'>function</a></td><td>Define a Function which can be called later.</td><td class='example'>function today.fr {
  write string,fr:out today;
}</td></tr>
<tr><td class='code'><a href='grammar.htm'>grammar</a></td><td>Define a Grammar for a calendar.</td><td class='example'>grammar J {
  inherit j;
  format ydm, "(Year)| (Day)| (Month:m)";
}</td></tr>
<tr><td class='code'><a href='if.htm'>if</a></td><td>Run code depending on condition.</td><td class='example'>if value = today
  write "&lt;b&gt;" + string value + "&lt;/b&gt;";
else
  write string value;
endif</td></tr>
<tr><td class='code'><a href='let.htm'>let</a></td><td>Initialise or change a variable.</td><td class='example'>let d = 1;</td></tr>
<tr><td class='code'><a href='mark.htm'>mark</a></td><td>Set a named mark in the script.</td><td class='example'>mark "test1";</td></tr>
<tr><td class='code'><a href='scheme.htm'>scheme</a></td><td>Define a calendar Scheme.</td><td class='example'>scheme j {
  name "Julian";
  base julian;
}</td></tr>
<tr><td class='code'><a href='set.htm'>set</a></td><td>Set a global default setting.</td><td class='example'>set output g:iso;</td></tr>
<tr><td class='code'><a href='vocab.htm'>vocab</a></td><td>Define a Vocabulary for a calendar field.</td><td class='example'>vocab ce {
  name "Historic Era";
  tokens {
    0, "Before Christ", "BC";
    1, "anno Domini", "AD";
  }
}</td></tr>
<tr><td class='code'><a href='write.htm'>write</a></td><td>Create output.</td><td class='example'>write value + ", ";</td></tr>
<tr><td class='code'><a href='write.htm'>writeln</a></td><td>Create output, followed by a new line.</td><td class='example'>writeln "Today is " + string today;</td></tr>
</table>

</div><!--id=content-->

 <div class="crumbs">
  <a href='../../../index.htm' class='m-item'>Home</a>
  <a href='../../../dev/index.htm' class='m-item'>Development</a>
  <a href='../../../dev/man/index.htm' class='m-item'>V0.0.7 Manual</a>
  <a href='index.htm' class='m-item thispage'>Script</a>
  <a href='../../../dev/man/script/expr.htm' class='m-item nav'>►</a>
  <a href='../../../dev/man/cal/roman.htm' class='m-item nav'>◄</a>
 </div>

 <div class='tail'></div>

 <div id='valid'>
  <p>
   <a href='http://validator.w3.org/check?uri=referer'>
    <img src='../../../sys/valid-xhtml10.png' alt='Valid XHTML 1.0 Strict' height='31' width='88' />
   </a>
  </p>
 </div>

 <div id='create-date'><p>10<sup>th</sup> March 2014</p></div>

<!-- Start of StatCounter Code for Default Guide -->
<script type="text/javascript">
//<![CDATA[
var sc_project=9849843;
var sc_invisible=1;
var sc_security="4988237c";
var scJsHost = (("https:" == document.location.protocol) ?
"https://secure." : "http://www.");
document.write("<sc"+"ript type='text/javascript' src='" +
scJsHost+
"statcounter.com/counter/counter_xhtml.js'></"+"script>");
//]]>
</script>
<noscript><div class="statcounter"><a title="website
statistics" href="http://statcounter.com/free-web-stats/"
class="statcounter"><img class="statcounter"
src="http://c.statcounter.com/9849843/0/4988237c/1/"
alt="website statistics" /></a></div></noscript>
<!-- End of StatCounter Code for Default Guide -->

</body>
</html>
