<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
<head>
 <title>HistoryCal - Define format</title>
 <meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
 <link rel='icon' type='image/png' href='../../../sys/logo32x32.png' />
 <link rel='stylesheet' type='text/css' href='../../../sys/livery.css' />
 <link rel='stylesheet' type='text/css' href='../../../sys/hcal.css' />
</head>
<body>

 <div class='heading'>
  <div class='logo'>
   <a  href='http://historycal.org'>
    <img class='logo' src='../../../sys/logo266x100.png' alt='Logo' />
   </a>
  </div>
  HistoryCal - V0.0.7 Manual<br />Define format
  <div class='clear'></div>
 </div>

 <div class="crumbs">
  <a href='../../../index.htm' class='m-item'>Home</a>
  <a href='../../../dev/index.htm' class='m-item'>Development</a>
  <a href='../../../dev/man/index.htm' class='m-item'>V0.0.7 Manual</a>
  <a href='../../../dev/man/script/index.htm' class='m-item'>Script</a>
  <a href='format.htm' class='m-item thispage'>Define format</a>
  <a href='../../../dev/man/script/scheme.htm' class='m-item nav'>►</a>
  <a href='../../../dev/man/script/grammar.htm' class='m-item nav'>◄</a>
 </div>

<div id='content' class='nomenu'>

<h2>Under Construction</h2>
<h2>Statement: format</h2>
<p>
 A format is normally a part of the grammar description
 but it may also be defined outside of the the grammar block.
 Defining it outside the grammar allows it to be added after a grammar has been defined,
 which means the default schemes can be extended with new formats.
</p>
<p>
 There are two aspects to the formatting of dates,
 firstly, interpreting the input from a user or application
 and secondly, creating the output to write a date in a particular way.
 If the text from the output can be fed directly back to the input,
 and the result remain unchanged, then the format is said to be reversible.
 The format statement is designed to handle both reversible and non-reversible text.
</p>
<p>
 A format within a particular grammar is given a unique code by which it can be referred to.
 If a grammar inherits another, it may replace one of its inherited formats by reusing the same name.
</p>
<p>
 If the format is being declared outside of a grammar statement,
 the code is a compound code including both the grammar and its name within that grammar,
 the parts separated by a colon ':' character.
</p>
<p>
 In its simplest form, format uses a single text string.
 For example:-
</p>
<table class='list'>
<tr><td class='example'>format dmy "(Day) |(Month:m.a) |(Year)";</td></tr>
</table>
<p>
 In this example, the date has been divided into 3 elements,
 separated by the '|' character.
</p>
<p>
 For input text, the format describes the expected order of the elements.
 The exact form of those elements (digits or text) is not important.
 If the number of elements is less than the format's,
 then the lest significant field (or more) is removed from the format.
</p>
<p>
 For text output, the value inside the parenthesis describes the field to be output.
 The field name may be the default, or alias field name detailed in the associated <b>grammar</b>. 
 Text outside of the parenthesis (excluding the '|' characters) is output verbatim.
 If an field is suppressed (a range short-cut for example),
 then everything in that element is omitted.
</p>
<p>
 The table below shows the available styles.
</p>
<table class='list'>
<tr><th colspan='4'>Field Format Specifier</th></tr>
<tr><th>Style</th><th>Syntax</th><th>Example</th><th>Result</th></tr>
<tr><td>Number</td><td class='code'>(<i>Name</i>)</td><td class='example'>(Month)</td><td>9</td></tr>
<tr><td>Vocabulary token</td><td class='code'>(<i>Name</i>:<i>Vocab</i>)</td><td class='example'>(Month:m)</td><td>September</td></tr>
<tr><td>Abbreviated vocabulary</td><td class='code'>(<i>Name</i>:<i>Vocab</i>:a)</td><td class='example'>(Month:m:a)</td><td>Sep</td></tr>
<tr><td>Left padded number</td><td class='code'>(<i>Name</i>::lp:<i>cwidth</i>)</td><td class='example'>(Month::lp:02)</td><td>09</td></tr>
<tr><td colspan='4'>Note, <i>cwidth</i> is the character used for padding followed by the minimum width.</td></tr>
<tr><th colspan='4'>Output Only Specifiers</th></tr>
<tr><td>Number and ordinal suffix</td><td class='code'>(<i>Name</i>::os)<br />(<i>Name</i>::os.u)</td><td class='example'>(Month::os)<br />(Month::os:u)</td><td>9th<br />9TH</td></tr>
<tr><td>Just ordinal suffix</td><td class='code'>(<i>Name</i>::oa)<br />(<i>Name</i>::oa:u)</td><td class='example'>(Month)_(Month::oa)<br />(Month)_(Month::oa:u)</td><td>9_th<br />9_TH</td></tr>
<tr><td>Number, Roman numerals</td><td class='code'>(<i>Name</i>::rn)<br />(<i>Name</i>::rn:l)</td><td class='example'>(Month::rn)<br />(Month::rn:l)</td><td>IX<br />ix</td></tr>
</table>
<p>
 More complex format descriptions can be described using a block of sub-statements.
</p>

<h3>Sub-Statements</h3>
<p>
 A format statement may contain of one or more of the following sub-statements:-
</p>
<table class='list'>
<tr><th colspan='4'>Sub-Statement List</th></tr>
<tr><th>Sub-Statement</th><th>Use</th><th>Example</th><th>Default</th></tr>
<tr><td class='code'>rules</td><td>Define the rules used to interpret the format.</td><td class='example'>rules iso8601;</td><td class='example'>rules text;</td></tr>
<tr><td class='code'>inout</td><td>Format string used for both input and output.</td><td class='example'>inout "(Day) |(Month:m:a) |(Year)";</td><td>See below.</td></tr>
<tr><td class='code'>strict</td><td>Format string used for both input and output, input includes the inter-field text.</td><td class='example'>strict "(Year::lp:04)|-(Month::lp:02)|-(Day::lp:02)";</td><td></td></tr>
<tr><td class='code'>input</td><td>Format string used for just input.</td><td class='example'>input "(Day) |(Month) |(Year)";</td><td>Use inout sub-statement.</td></tr>
<tr><td class='code'>output</td><td>Format string used for just output.</td><td class='example'>output "(CompDay:frcomp) |(NMDay) |(NMonth:frm) |(Year)";</td><td>Use inout sub-statement.</td></tr>
<tr><td class='code'>separators</td><td>Characters to be used to separate date elements.</td><td class='example'>separators "-";</td><td class='example'>separators ":,";</td></tr>
<tr><td class='code'>rank</td><td>Set the significance order for input and output fields.</td><td class='example'>rank "ce", "ceyear", "month", "day";</td><td>Use default order.</td></tr>
<tr><td class='code'>rankout</td><td>Set the significance order for output fields only.</td><td class='example'>rankout year, nmonth, nmday, cday;</td><td>Use default order.</td></tr>
<tr><td class='code'>significant</td><td>Set the significant number of fields required.</td><td class='example'>significant 4;</td><td>Number of non-optional or ranking fields.</td></tr>
</table>

<h3>Sub-Statement: rules</h3>
<p>
 The method of using a text format string, as described above, is the predominant one
 but it is possible to replace this with other methods.
 Two alternatives currently exist,
 a units base system and a system based on the ISO 8601 standard and its proposed extension.
</p>
<p>
 The method is selected using the <b>rules</b> sub-statement.
</p>
<table class='list'>
<tr><th colspan='2'>rules Sub-Statements</th></tr>
<tr><th>Sub-Statement</th><th>Use</th></tr>
<tr><td class='code'>rules text</td><td>Use a text string to define the date. The default value.</td></tr>
<tr><td class='code'>rules units</td><td>Use value, unit pairs to define the date, or date elements.</td></tr>
<tr><td class='code'>rules iso8601</td><td>Use the ISO 8601 standard to define a Gregorian date.</td></tr>
</table>

<h4>Sub-Statement: rules text</h4>
<p>
 Since this is the default method, there is no need to explicitly use it.
 It is included for completeness only.
</p>
<p>
 It should be noted that, currently,
 all the other sub-statements are meaningful only in connection with this rule. 
</p>

<h4>Sub-Statement: rules units</h4>
<p>
 A units format is one where a date (or parts of a date) is written as a sequence of value, unit pairs.
 Since the pair is self contained, they may be placed in any order.
</p>
<p>
 The unit name can be any field name from the schemes record,
 and the value will be placed into that field.
 The field name can be replaced with an alias provided by the owning grammars,
 either the <b>alias unit</b> or the <b>alias field</b> sub-statements.
</p>
<p>
 A units format may be created automatically using the "u" format code.
 This can be used as follows.
</p>
<table class='list'>
<tr><th>Example</th><th>Result</th></tr>
<tr><td class='example'>date,g:u "9month1948year19day"</td><td>2432814</td></tr> <!-- see suite/expressions/date004.hcs -->
<tr><td class='example'>date,g:u "1948y 19d 9m"</td><td>2432814</td></tr> <!-- see suite/expressions/date013.hcs -->
<tr><td class='example'>record,g:u "9 Month"</td><td>{"g", ?, 9, ?, ?}</td></tr> <!-- see suite/expressions/record008.hcs -->
<tr><td class='example'>string,g:u 2432814</td><td>"1948y 9m 19d"</td></tr> <!-- see suite/expressions/string010.hcs -->
</table>
<p>
 Note, this aspect of the language is still being actively developed.
 Since the units format has no options (at present)
 and can be created for any scheme using the "u" format code,
 there is no need to explicitly use it.
 It is included for completeness and future development only.
</p>

<h4>Sub-Statement: rules iso8601</h4>
<p>
 Although it is possible to input and output dates conforming to the common parts of the ISO 8601 standard,
 full implementation requires its own format sub-system.
 This is achieved with the <b>rules iso8601</b> sub-statement.
 This method can only be used with the Gregorian calendar schemes.
</p>
<p>
 Various optional parts of the standard can be activated using a number of switches following the <b>rules</b> sub-statement.
 these can be broken down into a number of groups as follows.
</p>
<table class='list'>
<tr><th colspan='5'>Sub-Statement List</th></tr>
<tr><th>Group</th><th>Switch</th><th>Description</th><th>Example</th><th>Output</th></tr>
<tr><td rowspan='3'>Style</td><td class='code'>calendar</td><td>Dates are treated as Year, Month and Day of month. Default</td><td class='example'>rules iso8601 calendar;</td><td>1948-09-19</td></tr>
<tr><td class='code'>week</td><td>Dates are output as Year, Week number and Day of week.</td><td class='example'>rules iso8601 week;</td><td>1948-W38-7</td></tr>
<tr><td class='code'>ordinal</td><td>Dates are output as Year and Day of year.</td><td class='example'>rules iso8601 ordinal;</td><td>1948-263</td></tr>
<tr><td rowspan='2'>Extended</td><td class='code'>extended</td><td>Dates are output with '-' (hyphen) separators between the elements. Default</td><td class='example'>rules iso8601 extended;</td><td>1948-09-19</td></tr>
<tr><td class='code'>basic</td><td>Dates are output without any separators between the elements.</td><td class='example'>rules iso8601 basic;</td><td>19480919</td></tr>
<tr><td rowspan='4'>Expanded Year</td><td class='code'>year</td><td>Year is input and output as 4 positive digits without a leading '+'. Default</td><td class='example'>rules iso8601 year;</td><td>1948-09-19</td></tr>
<tr><td class='code'>year4</td><td>Year are input and output as 4 digits with a leading '+' or '-'.</td><td class='example'>rules iso8601 year4;</td><td>+1948-09-19</td></tr>
<tr><td class='code'>year5</td><td>Year are input and output as 5 digits with a leading '+' or '-'.</td><td class='example'>rules iso8601 year5;</td><td>+01948-09-19</td></tr>
<tr><td class='code'>year6</td><td>Year are input and output as 6 digits with a leading '+' or '-'.</td><td class='example'>rules iso8601 year6;</td><td>+001948-09-19</td></tr>
<tr><td rowspan='2'>Year Length Error</td><td class='code'>error</td><td>The string "Year length error." is output. Default</td><td class='example'>rules iso8601 error;</td><td>1948-09-19</td></tr>
<tr><td class='code'>auto</td><td>The year width is extended and output with a leading '+' or '-'.</td><td class='example'>rules iso8601 auto;</td><td>1948-09-19</td></tr>
</table>
<p>
 The switches for each group may be mixed and matched as required.
 After the the initial <b>rules iso8601</b>, the order of the switches is not important. 
</p>

<h3>Sub-Statement: inout</h3>
<p>
 The inout sub-statement is equivalent to using a format statement without the braces block.
 So:-
</p>
<table class='list'>
<tr><td class='example'>format x:dmy "(Day) |(Month:m:a) |(Year)";</td></tr>
</table>
<p>
 is the same as:-
</p>
<table class='list'>
<tr><td class='example'>format x:dmy {
    inout "(Day) |(Month:m:a) |(Year)"; 
}</td></tr>
</table>
<p>
 The text format string is as described above.
</p>

<h3>Sub-Statement: strict</h3>
<p>
 This sub-statement is currently under development.
</p>
<p>
 At this time the only difference between the <b>strict</b> and <b>inout</b>
 statements is that strict will include the inter-field text from the format string
 when the "user input order" string is requested. 
</p>

<h3>Sub-Statement: input</h3>
<p>
 As the <b>inout</b> sub-statement except the format text string can be selected and used only for input.
</p>

<h3>Sub-Statement: output</h3>
<p>
 As the <b>inout</b> sub-statement except the format text string can be  selected and used only for output.
</p>
<p>
 If the format is intended to be reversible, then this will be accompanied with a matching <b>input</b> sub-statement.
 See the <a href='../defs/fr.htm'>French Republican default grammar</a> script for an example.
 If it used by itself then it creates a non-reversible format. 
</p>

<h3>Sub-Statement: separators</h3>
<p>
 When inputting a date, by default the characters used to separate date elements are '<b>,</b>' and '<b>;</b>'.
 This sub-statement allows a change to the default.
</p>

<h3>Sub-Statement: rank</h3>
<p>
 Rank is the order of the separate elements of a record that is used when an incomplete
 or range short-cut is used.
 The missing elements are assumed to be the lowest ranks,
 and the range covers all the possible dates.
</p>
<p>
 If not given, the rank order is that stated by the <b>grammar</b> or the same as the default order.
</p>

<h3>Sub-Statement: rankout</h3>
<p>
 The same as the <b>rank</b> sub-statement but it only affects the output of a format.
 It is used when separate <b>input</b> and <b>output</b> sub-statements are used.
</p>

<h3>Sub-Statement: significant</h3>
<p>
 The significant number of fields required to fully specify all dates for a given format.
 By default, this is the same as the number of non-optional fields in a record,
 or, if fields are separately ranked, then it is the number of ranked fields.
</p>


</div><!--id=content-->

 <div class="crumbs">
  <a href='../../../index.htm' class='m-item'>Home</a>
  <a href='../../../dev/index.htm' class='m-item'>Development</a>
  <a href='../../../dev/man/index.htm' class='m-item'>V0.0.7 Manual</a>
  <a href='../../../dev/man/script/index.htm' class='m-item'>Script</a>
  <a href='format.htm' class='m-item thispage'>Define format</a>
  <a href='../../../dev/man/script/scheme.htm' class='m-item nav'>►</a>
  <a href='../../../dev/man/script/grammar.htm' class='m-item nav'>◄</a>
 </div>

 <div class='tail'></div>

 <div id='valid'>
  <p>
   <a href='http://validator.w3.org/check?uri=referer'>
    <img src='../../../sys/valid-xhtml10.png' alt='Valid XHTML 1.0 Strict' height='31' width='88' />
   </a>
  </p>
 </div>

 <div id='create-date'><p>11<sup>th</sup> March 2016</p></div>

<!-- Start of StatCounter Code for Default Guide -->
<script type="text/javascript">
//<![CDATA[
var sc_project=9849843;
var sc_invisible=1;
var sc_security="4988237c";
var scJsHost = (("https:" == document.location.protocol) ?
"https://secure." : "http://www.");
document.write("<sc"+"ript type='text/javascript' src='" +
scJsHost+
"statcounter.com/counter/counter_xhtml.js'></"+"script>");
//]]>
</script>
<noscript><div class="statcounter"><a title="website
statistics" href="http://statcounter.com/free-web-stats/"
class="statcounter"><img class="statcounter"
src="http://c.statcounter.com/9849843/0/4988237c/1/"
alt="website statistics" /></a></div></noscript>
<!-- End of StatCounter Code for Default Guide -->

</body>
</html>
