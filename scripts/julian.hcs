/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Name:        scripts/julian.hcs
 * Project:     Cal: Programmable Historical Calendar library.
 * Purpose:     Default script.
 * Author:      Nick Matthews
 * Website:     http://historycal.org
 * Created:     30th September 2014
 * Copyright:   Copyright (c) 2014 - 2018, Nick Matthews.
 * Licence:     GNU GPLv3
 *
 *  The Cal library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The Cal library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the Cal library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/


vocab m {
    name "Month names";
    fieldname month;
    lang en;
    pseudo     Month,     Mon;
    tokens {
        1,  "January",   "Jan";
        2,  "February",  "Feb";
        3,  "March",     "Mar";
        4,  "April",     "Apr";
        5,  "May";
        6,  "June",      "Jun";
        7,  "July",      "Jul";
        8,  "August",    "Aug";
        9,  "September", "Sep";
        10, "October",   "Oct";
        11, "November",  "Nov";
        12, "December",  "Dec";
    }
}

grammar j {
    optional wday;
    vocabs m, w;
    alias field {
        WDay,  wday;
        Day,   day;
        Month, month;
        Year,  year;
    }
    alias pseudo {
        w,    WDay;
        dd,   Day;
        mm,   Month;
        yyyy, Year;
    }
    alias unit {
        d,  day;
        m,  month;
        y,  year;
        wd, wday;
        w,  week;
    }
    format  dmy,    "(Day) |(Month:m.a) |(Year)";
    format  wdmy,   "(WDay:w.a) |(Day) |(Month:m.a) |(Year)";
    format out {
        output      "(Day:+os) |(Month:m) |(Year)";
    }
    format  full {
        output      "(WDay:w) |(Day:+os) |(Month:m) |(Year)";
    }
    format "dmy+",  "(Day) |(Month:m) |(Year)";
    format "wdmy+", "(WDay:w) |(Day) |(Month:m) |(Year)";
    format  mdy,    "(Month:m.a) |(Day), |(Year)";
    format  ymd,    "(Year)|:(Month:m.a)|:(Day)";
    pref dmy;
}

scheme j {
    name "Julian";
    base julian;
    grammar j;
}

grammar g {
    inherit j;
    format iso {
        rules iso8601 caldate;
    }
    format iso_set {
        rules iso8601 dateset;
    }
    pref dmy;
}

scheme g {
    name "Gregorian";
    base gregorian;
    grammar g;
}

set inout g; // Set Gregorian as the default input and output scheme.

grammar j_sh {
    optional unshift, wday;
    vocabs m, w;
    alias field {
        WDay,        wday;
        Day,         day;
        Month,       month;
        Year,        year;
        "Hist-Year", unshift;
    }
    alias pseudo {
        dd,   Day;
        mm,   Month;
        yyyy, Year;
        y,    "Hist-Year";
    }
    format dmy,   "(Day) |(Month:m.a) |(Year)";
    format dmyh,  "(Day) |(Month:m.a) |(Year/Hist-Year)";
    format out {
        output "(Day:+os) |(Month:m) |(Year/Hist-Year)";
    }
    format full {
        output "(WDay:w) |(Day:+os) |(Month:m) |(Year/Hist-Year)";
    }
    format wdmyh, "(WDay:w.a) |(Day) |(Month:m.a) |(Year/Hist-Year)";
    pref dmyh;
}

scheme ja {
    name "Julian Annunciation";
    shift j, 1721507;    // j:dmy# 25 Mar 1
    grammar j_sh;
}

scheme jap {
    name "Julian Annunciation Pisa";
    shift j, 1721142;    // j:dmy# 25 Mar 0
    grammar j_sh;
}

scheme jn {
    name "Julian Nativity";
    shift j, 1721417;    // j:dmy# 25 Dec 0
    grammar j_sh;
}

scheme se {
    name "Spanish Era";
    shift j, 1707544;  // j:dmy# 1 Jan -37
    grammar j;
}

// End of scripts/julian.hcs file
